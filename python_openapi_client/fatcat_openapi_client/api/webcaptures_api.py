"""
    fatcat

    Fatcat is a scalable, versioned, API-oriented catalog of bibliographic entities and file metadata.   # noqa: E501

    The version of the OpenAPI document: 0.5.0
    Contact: webservices@archive.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fatcat_openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from fatcat_openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fatcat_openapi_client.model.editgroup import Editgroup
from fatcat_openapi_client.model.entity_edit import EntityEdit
from fatcat_openapi_client.model.entity_history_entry import EntityHistoryEntry
from fatcat_openapi_client.model.error_response import ErrorResponse
from fatcat_openapi_client.model.success import Success
from fatcat_openapi_client.model.webcapture_auto_batch import WebcaptureAutoBatch
from fatcat_openapi_client.model.webcapture_entity import WebcaptureEntity


class WebcapturesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_webcapture_endpoint = _Endpoint(
            settings={
                'response_type': (EntityEdit,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/{editgroup_id}/webcapture',
                'operation_id': 'create_webcapture',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'editgroup_id',
                    'entity',
                ],
                'required': [
                    'editgroup_id',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'editgroup_id':
                        (str,),
                    'entity':
                        (WebcaptureEntity,),
                },
                'attribute_map': {
                    'editgroup_id': 'editgroup_id',
                },
                'location_map': {
                    'editgroup_id': 'path',
                    'entity': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_webcapture_auto_batch_endpoint = _Endpoint(
            settings={
                'response_type': (Editgroup,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/auto/webcapture/batch',
                'operation_id': 'create_webcapture_auto_batch',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_batch',
                ],
                'required': [
                    'auto_batch',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_batch':
                        (WebcaptureAutoBatch,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'auto_batch': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_webcapture_endpoint = _Endpoint(
            settings={
                'response_type': (EntityEdit,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/{editgroup_id}/webcapture/{ident}',
                'operation_id': 'delete_webcapture',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'editgroup_id',
                    'ident',
                ],
                'required': [
                    'editgroup_id',
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'editgroup_id':
                        (str,),
                    'ident':
                        (str,),
                },
                'attribute_map': {
                    'editgroup_id': 'editgroup_id',
                    'ident': 'ident',
                },
                'location_map': {
                    'editgroup_id': 'path',
                    'ident': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_webcapture_edit_endpoint = _Endpoint(
            settings={
                'response_type': (Success,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/{editgroup_id}/webcapture/edit/{edit_id}',
                'operation_id': 'delete_webcapture_edit',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'editgroup_id',
                    'edit_id',
                ],
                'required': [
                    'editgroup_id',
                    'edit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'edit_id',
                ]
            },
            root_map={
                'validations': {
                    ('edit_id',): {
                        'max_length': 36,
                        'min_length': 36,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'editgroup_id':
                        (str,),
                    'edit_id':
                        (str,),
                },
                'attribute_map': {
                    'editgroup_id': 'editgroup_id',
                    'edit_id': 'edit_id',
                },
                'location_map': {
                    'editgroup_id': 'path',
                    'edit_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_webcapture_endpoint = _Endpoint(
            settings={
                'response_type': (WebcaptureEntity,),
                'auth': [],
                'endpoint_path': '/webcapture/{ident}',
                'operation_id': 'get_webcapture',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ident',
                    'expand',
                    'hide',
                ],
                'required': [
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ident':
                        (str,),
                    'expand':
                        (str,),
                    'hide':
                        (str,),
                },
                'attribute_map': {
                    'ident': 'ident',
                    'expand': 'expand',
                    'hide': 'hide',
                },
                'location_map': {
                    'ident': 'path',
                    'expand': 'query',
                    'hide': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_webcapture_edit_endpoint = _Endpoint(
            settings={
                'response_type': (EntityEdit,),
                'auth': [],
                'endpoint_path': '/webcapture/edit/{edit_id}',
                'operation_id': 'get_webcapture_edit',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'edit_id',
                ],
                'required': [
                    'edit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'edit_id',
                ]
            },
            root_map={
                'validations': {
                    ('edit_id',): {
                        'max_length': 36,
                        'min_length': 36,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'edit_id':
                        (str,),
                },
                'attribute_map': {
                    'edit_id': 'edit_id',
                },
                'location_map': {
                    'edit_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_webcapture_history_endpoint = _Endpoint(
            settings={
                'response_type': ([EntityHistoryEntry],),
                'auth': [],
                'endpoint_path': '/webcapture/{ident}/history',
                'operation_id': 'get_webcapture_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ident',
                    'limit',
                ],
                'required': [
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ident':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'ident': 'ident',
                    'limit': 'limit',
                },
                'location_map': {
                    'ident': 'path',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_webcapture_redirects_endpoint = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [],
                'endpoint_path': '/webcapture/{ident}/redirects',
                'operation_id': 'get_webcapture_redirects',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ident',
                ],
                'required': [
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ident':
                        (str,),
                },
                'attribute_map': {
                    'ident': 'ident',
                },
                'location_map': {
                    'ident': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_webcapture_revision_endpoint = _Endpoint(
            settings={
                'response_type': (WebcaptureEntity,),
                'auth': [],
                'endpoint_path': '/webcapture/rev/{rev_id}',
                'operation_id': 'get_webcapture_revision',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'rev_id',
                    'expand',
                    'hide',
                ],
                'required': [
                    'rev_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'rev_id',
                ]
            },
            root_map={
                'validations': {
                    ('rev_id',): {
                        'max_length': 36,
                        'min_length': 36,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'rev_id':
                        (str,),
                    'expand':
                        (str,),
                    'hide':
                        (str,),
                },
                'attribute_map': {
                    'rev_id': 'rev_id',
                    'expand': 'expand',
                    'hide': 'hide',
                },
                'location_map': {
                    'rev_id': 'path',
                    'expand': 'query',
                    'hide': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_webcapture_endpoint = _Endpoint(
            settings={
                'response_type': (EntityEdit,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/{editgroup_id}/webcapture/{ident}',
                'operation_id': 'update_webcapture',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'editgroup_id',
                    'ident',
                    'entity',
                ],
                'required': [
                    'editgroup_id',
                    'ident',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'editgroup_id':
                        (str,),
                    'ident':
                        (str,),
                    'entity':
                        (WebcaptureEntity,),
                },
                'attribute_map': {
                    'editgroup_id': 'editgroup_id',
                    'ident': 'ident',
                },
                'location_map': {
                    'editgroup_id': 'path',
                    'ident': 'path',
                    'entity': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_webcapture(
        self,
        editgroup_id,
        entity,
        **kwargs
    ):
        """create_webcapture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_webcapture(editgroup_id, entity, async_req=True)
        >>> result = thread.get()

        Args:
            editgroup_id (str):
            entity (WebcaptureEntity):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EntityEdit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['editgroup_id'] = \
            editgroup_id
        kwargs['entity'] = \
            entity
        return self.create_webcapture_endpoint.call_with_http_info(**kwargs)

    def create_webcapture_auto_batch(
        self,
        auto_batch,
        **kwargs
    ):
        """create_webcapture_auto_batch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_webcapture_auto_batch(auto_batch, async_req=True)
        >>> result = thread.get()

        Args:
            auto_batch (WebcaptureAutoBatch):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Editgroup
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['auto_batch'] = \
            auto_batch
        return self.create_webcapture_auto_batch_endpoint.call_with_http_info(**kwargs)

    def delete_webcapture(
        self,
        editgroup_id,
        ident,
        **kwargs
    ):
        """delete_webcapture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_webcapture(editgroup_id, ident, async_req=True)
        >>> result = thread.get()

        Args:
            editgroup_id (str):
            ident (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EntityEdit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['editgroup_id'] = \
            editgroup_id
        kwargs['ident'] = \
            ident
        return self.delete_webcapture_endpoint.call_with_http_info(**kwargs)

    def delete_webcapture_edit(
        self,
        editgroup_id,
        edit_id,
        **kwargs
    ):
        """delete_webcapture_edit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_webcapture_edit(editgroup_id, edit_id, async_req=True)
        >>> result = thread.get()

        Args:
            editgroup_id (str):
            edit_id (str): UUID (lower-case, dash-separated, hex-encoded 128-bit)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['editgroup_id'] = \
            editgroup_id
        kwargs['edit_id'] = \
            edit_id
        return self.delete_webcapture_edit_endpoint.call_with_http_info(**kwargs)

    def get_webcapture(
        self,
        ident,
        **kwargs
    ):
        """get_webcapture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_webcapture(ident, async_req=True)
        >>> result = thread.get()

        Args:
            ident (str):

        Keyword Args:
            expand (str): List of sub-entities to expand in response. For webcaptures, `releases` is accepted.. [optional]
            hide (str): List of entity fields to elide in response. For webcaptures, 'cdx' is accepted.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WebcaptureEntity
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ident'] = \
            ident
        return self.get_webcapture_endpoint.call_with_http_info(**kwargs)

    def get_webcapture_edit(
        self,
        edit_id,
        **kwargs
    ):
        """get_webcapture_edit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_webcapture_edit(edit_id, async_req=True)
        >>> result = thread.get()

        Args:
            edit_id (str): UUID (lower-case, dash-separated, hex-encoded 128-bit)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EntityEdit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['edit_id'] = \
            edit_id
        return self.get_webcapture_edit_endpoint.call_with_http_info(**kwargs)

    def get_webcapture_history(
        self,
        ident,
        **kwargs
    ):
        """get_webcapture_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_webcapture_history(ident, async_req=True)
        >>> result = thread.get()

        Args:
            ident (str):

        Keyword Args:
            limit (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [EntityHistoryEntry]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ident'] = \
            ident
        return self.get_webcapture_history_endpoint.call_with_http_info(**kwargs)

    def get_webcapture_redirects(
        self,
        ident,
        **kwargs
    ):
        """get_webcapture_redirects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_webcapture_redirects(ident, async_req=True)
        >>> result = thread.get()

        Args:
            ident (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [str]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ident'] = \
            ident
        return self.get_webcapture_redirects_endpoint.call_with_http_info(**kwargs)

    def get_webcapture_revision(
        self,
        rev_id,
        **kwargs
    ):
        """get_webcapture_revision  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_webcapture_revision(rev_id, async_req=True)
        >>> result = thread.get()

        Args:
            rev_id (str): UUID (lower-case, dash-separated, hex-encoded 128-bit)

        Keyword Args:
            expand (str): List of sub-entities to expand in response. See `get_webcapture`.. [optional]
            hide (str): List of entity fields to elide in response. See `get_webcapture`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WebcaptureEntity
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['rev_id'] = \
            rev_id
        return self.get_webcapture_revision_endpoint.call_with_http_info(**kwargs)

    def update_webcapture(
        self,
        editgroup_id,
        ident,
        entity,
        **kwargs
    ):
        """update_webcapture  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_webcapture(editgroup_id, ident, entity, async_req=True)
        >>> result = thread.get()

        Args:
            editgroup_id (str):
            ident (str):
            entity (WebcaptureEntity):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EntityEdit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['editgroup_id'] = \
            editgroup_id
        kwargs['ident'] = \
            ident
        kwargs['entity'] = \
            entity
        return self.update_webcapture_endpoint.call_with_http_info(**kwargs)

