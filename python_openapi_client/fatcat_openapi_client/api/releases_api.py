"""
    fatcat

    Fatcat is a scalable, versioned, API-oriented catalog of bibliographic entities and file metadata.   # noqa: E501

    The version of the OpenAPI document: 0.5.0
    Contact: webservices@archive.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from fatcat_openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from fatcat_openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from fatcat_openapi_client.model.editgroup import Editgroup
from fatcat_openapi_client.model.entity_edit import EntityEdit
from fatcat_openapi_client.model.entity_history_entry import EntityHistoryEntry
from fatcat_openapi_client.model.error_response import ErrorResponse
from fatcat_openapi_client.model.file_entity import FileEntity
from fatcat_openapi_client.model.fileset_entity import FilesetEntity
from fatcat_openapi_client.model.release_auto_batch import ReleaseAutoBatch
from fatcat_openapi_client.model.release_entity import ReleaseEntity
from fatcat_openapi_client.model.success import Success
from fatcat_openapi_client.model.webcapture_entity import WebcaptureEntity


class ReleasesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_release_endpoint = _Endpoint(
            settings={
                'response_type': (EntityEdit,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/{editgroup_id}/release',
                'operation_id': 'create_release',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'editgroup_id',
                    'entity',
                ],
                'required': [
                    'editgroup_id',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'editgroup_id':
                        (str,),
                    'entity':
                        (ReleaseEntity,),
                },
                'attribute_map': {
                    'editgroup_id': 'editgroup_id',
                },
                'location_map': {
                    'editgroup_id': 'path',
                    'entity': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_release_auto_batch_endpoint = _Endpoint(
            settings={
                'response_type': (Editgroup,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/auto/release/batch',
                'operation_id': 'create_release_auto_batch',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_batch',
                ],
                'required': [
                    'auto_batch',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_batch':
                        (ReleaseAutoBatch,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'auto_batch': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_release_endpoint = _Endpoint(
            settings={
                'response_type': (EntityEdit,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/{editgroup_id}/release/{ident}',
                'operation_id': 'delete_release',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'editgroup_id',
                    'ident',
                ],
                'required': [
                    'editgroup_id',
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'editgroup_id':
                        (str,),
                    'ident':
                        (str,),
                },
                'attribute_map': {
                    'editgroup_id': 'editgroup_id',
                    'ident': 'ident',
                },
                'location_map': {
                    'editgroup_id': 'path',
                    'ident': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_release_edit_endpoint = _Endpoint(
            settings={
                'response_type': (Success,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/{editgroup_id}/release/edit/{edit_id}',
                'operation_id': 'delete_release_edit',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'editgroup_id',
                    'edit_id',
                ],
                'required': [
                    'editgroup_id',
                    'edit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'edit_id',
                ]
            },
            root_map={
                'validations': {
                    ('edit_id',): {
                        'max_length': 36,
                        'min_length': 36,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'editgroup_id':
                        (str,),
                    'edit_id':
                        (str,),
                },
                'attribute_map': {
                    'editgroup_id': 'editgroup_id',
                    'edit_id': 'edit_id',
                },
                'location_map': {
                    'editgroup_id': 'path',
                    'edit_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_release_endpoint = _Endpoint(
            settings={
                'response_type': (ReleaseEntity,),
                'auth': [],
                'endpoint_path': '/release/{ident}',
                'operation_id': 'get_release',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ident',
                    'expand',
                    'hide',
                ],
                'required': [
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ident':
                        (str,),
                    'expand':
                        (str,),
                    'hide':
                        (str,),
                },
                'attribute_map': {
                    'ident': 'ident',
                    'expand': 'expand',
                    'hide': 'hide',
                },
                'location_map': {
                    'ident': 'path',
                    'expand': 'query',
                    'hide': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_release_edit_endpoint = _Endpoint(
            settings={
                'response_type': (EntityEdit,),
                'auth': [],
                'endpoint_path': '/release/edit/{edit_id}',
                'operation_id': 'get_release_edit',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'edit_id',
                ],
                'required': [
                    'edit_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'edit_id',
                ]
            },
            root_map={
                'validations': {
                    ('edit_id',): {
                        'max_length': 36,
                        'min_length': 36,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'edit_id':
                        (str,),
                },
                'attribute_map': {
                    'edit_id': 'edit_id',
                },
                'location_map': {
                    'edit_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_release_files_endpoint = _Endpoint(
            settings={
                'response_type': ([FileEntity],),
                'auth': [],
                'endpoint_path': '/release/{ident}/files',
                'operation_id': 'get_release_files',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ident',
                    'hide',
                ],
                'required': [
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ident':
                        (str,),
                    'hide':
                        (str,),
                },
                'attribute_map': {
                    'ident': 'ident',
                    'hide': 'hide',
                },
                'location_map': {
                    'ident': 'path',
                    'hide': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_release_filesets_endpoint = _Endpoint(
            settings={
                'response_type': ([FilesetEntity],),
                'auth': [],
                'endpoint_path': '/release/{ident}/filesets',
                'operation_id': 'get_release_filesets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ident',
                    'hide',
                ],
                'required': [
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ident':
                        (str,),
                    'hide':
                        (str,),
                },
                'attribute_map': {
                    'ident': 'ident',
                    'hide': 'hide',
                },
                'location_map': {
                    'ident': 'path',
                    'hide': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_release_history_endpoint = _Endpoint(
            settings={
                'response_type': ([EntityHistoryEntry],),
                'auth': [],
                'endpoint_path': '/release/{ident}/history',
                'operation_id': 'get_release_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ident',
                    'limit',
                ],
                'required': [
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ident':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'ident': 'ident',
                    'limit': 'limit',
                },
                'location_map': {
                    'ident': 'path',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_release_redirects_endpoint = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [],
                'endpoint_path': '/release/{ident}/redirects',
                'operation_id': 'get_release_redirects',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ident',
                ],
                'required': [
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ident':
                        (str,),
                },
                'attribute_map': {
                    'ident': 'ident',
                },
                'location_map': {
                    'ident': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_release_revision_endpoint = _Endpoint(
            settings={
                'response_type': (ReleaseEntity,),
                'auth': [],
                'endpoint_path': '/release/rev/{rev_id}',
                'operation_id': 'get_release_revision',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'rev_id',
                    'expand',
                    'hide',
                ],
                'required': [
                    'rev_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'rev_id',
                ]
            },
            root_map={
                'validations': {
                    ('rev_id',): {
                        'max_length': 36,
                        'min_length': 36,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'rev_id':
                        (str,),
                    'expand':
                        (str,),
                    'hide':
                        (str,),
                },
                'attribute_map': {
                    'rev_id': 'rev_id',
                    'expand': 'expand',
                    'hide': 'hide',
                },
                'location_map': {
                    'rev_id': 'path',
                    'expand': 'query',
                    'hide': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_release_webcaptures_endpoint = _Endpoint(
            settings={
                'response_type': ([WebcaptureEntity],),
                'auth': [],
                'endpoint_path': '/release/{ident}/webcaptures',
                'operation_id': 'get_release_webcaptures',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ident',
                    'hide',
                ],
                'required': [
                    'ident',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ident':
                        (str,),
                    'hide':
                        (str,),
                },
                'attribute_map': {
                    'ident': 'ident',
                    'hide': 'hide',
                },
                'location_map': {
                    'ident': 'path',
                    'hide': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.lookup_release_endpoint = _Endpoint(
            settings={
                'response_type': (ReleaseEntity,),
                'auth': [],
                'endpoint_path': '/release/lookup',
                'operation_id': 'lookup_release',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'doi',
                    'wikidata_qid',
                    'isbn13',
                    'pmid',
                    'pmcid',
                    'core',
                    'arxiv',
                    'jstor',
                    'ark',
                    'mag',
                    'doaj',
                    'dblp',
                    'oai',
                    'hdl',
                    'expand',
                    'hide',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'doi':
                        (str,),
                    'wikidata_qid':
                        (str,),
                    'isbn13':
                        (str,),
                    'pmid':
                        (str,),
                    'pmcid':
                        (str,),
                    'core':
                        (str,),
                    'arxiv':
                        (str,),
                    'jstor':
                        (str,),
                    'ark':
                        (str,),
                    'mag':
                        (str,),
                    'doaj':
                        (str,),
                    'dblp':
                        (str,),
                    'oai':
                        (str,),
                    'hdl':
                        (str,),
                    'expand':
                        (str,),
                    'hide':
                        (str,),
                },
                'attribute_map': {
                    'doi': 'doi',
                    'wikidata_qid': 'wikidata_qid',
                    'isbn13': 'isbn13',
                    'pmid': 'pmid',
                    'pmcid': 'pmcid',
                    'core': 'core',
                    'arxiv': 'arxiv',
                    'jstor': 'jstor',
                    'ark': 'ark',
                    'mag': 'mag',
                    'doaj': 'doaj',
                    'dblp': 'dblp',
                    'oai': 'oai',
                    'hdl': 'hdl',
                    'expand': 'expand',
                    'hide': 'hide',
                },
                'location_map': {
                    'doi': 'query',
                    'wikidata_qid': 'query',
                    'isbn13': 'query',
                    'pmid': 'query',
                    'pmcid': 'query',
                    'core': 'query',
                    'arxiv': 'query',
                    'jstor': 'query',
                    'ark': 'query',
                    'mag': 'query',
                    'doaj': 'query',
                    'dblp': 'query',
                    'oai': 'query',
                    'hdl': 'query',
                    'expand': 'query',
                    'hide': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_release_endpoint = _Endpoint(
            settings={
                'response_type': (EntityEdit,),
                'auth': [
                    'Bearer'
                ],
                'endpoint_path': '/editgroup/{editgroup_id}/release/{ident}',
                'operation_id': 'update_release',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'editgroup_id',
                    'ident',
                    'entity',
                ],
                'required': [
                    'editgroup_id',
                    'ident',
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'editgroup_id':
                        (str,),
                    'ident':
                        (str,),
                    'entity':
                        (ReleaseEntity,),
                },
                'attribute_map': {
                    'editgroup_id': 'editgroup_id',
                    'ident': 'ident',
                },
                'location_map': {
                    'editgroup_id': 'path',
                    'ident': 'path',
                    'entity': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_release(
        self,
        editgroup_id,
        entity,
        **kwargs
    ):
        """create_release  # noqa: E501

        Create a single Release entity as part of an existing editgroup. If the `work_id` field is not set, a work entity will be created automatically and this field set pointing to the new work.  Editgroup must be mutable (aka, not accepted) and editor must have permission (aka, have created the editgrou p or have `admin` role).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_release(editgroup_id, entity, async_req=True)
        >>> result = thread.get()

        Args:
            editgroup_id (str):
            entity (ReleaseEntity):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EntityEdit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['editgroup_id'] = \
            editgroup_id
        kwargs['entity'] = \
            entity
        return self.create_release_endpoint.call_with_http_info(**kwargs)

    def create_release_auto_batch(
        self,
        auto_batch,
        **kwargs
    ):
        """create_release_auto_batch  # noqa: E501

        Create a set of Release entities as part of a new editgroup, and accept that editgroup in the same atomic request.  This method is mostly useful for bulk import of new entities by carefully written bots. This method is more efficient than creating an editgroup, several entities, then accepting the editgroup, both in terms of API requests required and database load. Requires `admin` role.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_release_auto_batch(auto_batch, async_req=True)
        >>> result = thread.get()

        Args:
            auto_batch (ReleaseAutoBatch):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Editgroup
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['auto_batch'] = \
            auto_batch
        return self.create_release_auto_batch_endpoint.call_with_http_info(**kwargs)

    def delete_release(
        self,
        editgroup_id,
        ident,
        **kwargs
    ):
        """delete_release  # noqa: E501

        Creates a new \"deletion\" edit for a specific entity as part of an existing editgroup.  This is not the method to use to remove an edit from an editgroup; for that use `delete_release_edit`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_release(editgroup_id, ident, async_req=True)
        >>> result = thread.get()

        Args:
            editgroup_id (str):
            ident (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EntityEdit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['editgroup_id'] = \
            editgroup_id
        kwargs['ident'] = \
            ident
        return self.delete_release_endpoint.call_with_http_info(**kwargs)

    def delete_release_edit(
        self,
        editgroup_id,
        edit_id,
        **kwargs
    ):
        """delete_release_edit  # noqa: E501

        Removes a single edit from the specified editgroup. The editgroup must be mutable (aka, not accepted/merged), and the editor making this request must have permission (aka, have created the editgroup or hold the `admin` role).  Not to be confused with the `delete_container` method, which *creates* a new edit in the given editgroup.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_release_edit(editgroup_id, edit_id, async_req=True)
        >>> result = thread.get()

        Args:
            editgroup_id (str):
            edit_id (str): UUID (lower-case, dash-separated, hex-encoded 128-bit)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Success
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['editgroup_id'] = \
            editgroup_id
        kwargs['edit_id'] = \
            edit_id
        return self.delete_release_edit_endpoint.call_with_http_info(**kwargs)

    def get_release(
        self,
        ident,
        **kwargs
    ):
        """get_release  # noqa: E501

        Fetches a single Release entity from the catalog.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_release(ident, async_req=True)
        >>> result = thread.get()

        Args:
            ident (str):

        Keyword Args:
            expand (str): List of sub-entities to expand in response. For releases, 'files', 'filesets, 'webcaptures', 'container', and 'creators' are valid. . [optional]
            hide (str): List of entity fields to elide in response (for efficiency). For releases, 'abstracts', 'refs', and 'contribs' are valid. . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ReleaseEntity
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ident'] = \
            ident
        return self.get_release_endpoint.call_with_http_info(**kwargs)

    def get_release_edit(
        self,
        edit_id,
        **kwargs
    ):
        """get_release_edit  # noqa: E501

        Returns the entity edit object with the given identifier. This method is expected to be used rarely.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_release_edit(edit_id, async_req=True)
        >>> result = thread.get()

        Args:
            edit_id (str): UUID (lower-case, dash-separated, hex-encoded 128-bit)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EntityEdit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['edit_id'] = \
            edit_id
        return self.get_release_edit_endpoint.call_with_http_info(**kwargs)

    def get_release_files(
        self,
        ident,
        **kwargs
    ):
        """get_release_files  # noqa: E501

        Returns the set of File entities that have a `release_id` pointing to this release entity.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_release_files(ident, async_req=True)
        >>> result = thread.get()

        Args:
            ident (str):

        Keyword Args:
            hide (str): List of entity fields to elide in response. See `get_file`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [FileEntity]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ident'] = \
            ident
        return self.get_release_files_endpoint.call_with_http_info(**kwargs)

    def get_release_filesets(
        self,
        ident,
        **kwargs
    ):
        """get_release_filesets  # noqa: E501

        Returns the set of Fileset entities that have a `release_id` pointing to this release entity.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_release_filesets(ident, async_req=True)
        >>> result = thread.get()

        Args:
            ident (str):

        Keyword Args:
            hide (str): List of entity fields to elide in response. See `get_fileset`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [FilesetEntity]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ident'] = \
            ident
        return self.get_release_filesets_endpoint.call_with_http_info(**kwargs)

    def get_release_history(
        self,
        ident,
        **kwargs
    ):
        """get_release_history  # noqa: E501

        Fetches the history of accepted edits (changelog entries) for a specific entity fatcat identifier.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_release_history(ident, async_req=True)
        >>> result = thread.get()

        Args:
            ident (str):

        Keyword Args:
            limit (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [EntityHistoryEntry]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ident'] = \
            ident
        return self.get_release_history_endpoint.call_with_http_info(**kwargs)

    def get_release_redirects(
        self,
        ident,
        **kwargs
    ):
        """get_release_redirects  # noqa: E501

        Returns the set of entity identifiers which currently redirect to this identifier.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_release_redirects(ident, async_req=True)
        >>> result = thread.get()

        Args:
            ident (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [str]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ident'] = \
            ident
        return self.get_release_redirects_endpoint.call_with_http_info(**kwargs)

    def get_release_revision(
        self,
        rev_id,
        **kwargs
    ):
        """get_release_revision  # noqa: E501

        Fetches a specific entity revision. Note that the returned revision will not be associated with any particular fatcat identifier (even if one or more identifiers do currently point to this revision). The revision may even be part of an un-merged editgroup.  Revisions are immutable and can not be deleted or updated.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_release_revision(rev_id, async_req=True)
        >>> result = thread.get()

        Args:
            rev_id (str): UUID (lower-case, dash-separated, hex-encoded 128-bit)

        Keyword Args:
            expand (str): List of sub-entities to expand in response. See `get_release`, though note that identifier-based exapansions like `file` will always be empty for revisions.. [optional]
            hide (str): List of entity fields to elide in response. See `get_release`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ReleaseEntity
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['rev_id'] = \
            rev_id
        return self.get_release_revision_endpoint.call_with_http_info(**kwargs)

    def get_release_webcaptures(
        self,
        ident,
        **kwargs
    ):
        """get_release_webcaptures  # noqa: E501

        Returns the set of Web Capture entities that have a `release_id` pointing to this release entity.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_release_webcaptures(ident, async_req=True)
        >>> result = thread.get()

        Args:
            ident (str):

        Keyword Args:
            hide (str): List of entity fields to elide in response. See `get_webcapture`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [WebcaptureEntity]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ident'] = \
            ident
        return self.get_release_webcaptures_endpoint.call_with_http_info(**kwargs)

    def lookup_release(
        self,
        **kwargs
    ):
        """lookup_release  # noqa: E501

        Looks for an active entity with the given external identifier. If any such entity is found, returns a single complete entity. If multiple entities have the same external identifier, this is considered a soft catalog error, and the behavior of which entity is returned is undefined.  One (and only one) external identifier should be specified per request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lookup_release(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            doi (str): [optional]
            wikidata_qid (str): [optional]
            isbn13 (str): [optional]
            pmid (str): [optional]
            pmcid (str): [optional]
            core (str): [optional]
            arxiv (str): [optional]
            jstor (str): [optional]
            ark (str): [optional]
            mag (str): [optional]
            doaj (str): [optional]
            dblp (str): [optional]
            oai (str): [optional]
            hdl (str): [optional]
            expand (str): List of sub-entities to expand in response. See `get_release`.. [optional]
            hide (str): List of sub-entities to elide in response. See `get_release`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ReleaseEntity
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.lookup_release_endpoint.call_with_http_info(**kwargs)

    def update_release(
        self,
        editgroup_id,
        ident,
        entity,
        **kwargs
    ):
        """update_release  # noqa: E501

        Updates an existing entity as part of a specific (existing) editgroup. The editgroup must be open for updates (aka, not accepted/merged), and the editor making the request must have permissions (aka, must have created the editgroup or have `admin` role).  This method can also be used to update an existing entity edit as part of an editgroup. For example, if an entity was created in this editgroup, an editor could make changes to the new entity's metadata before merging.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_release(editgroup_id, ident, entity, async_req=True)
        >>> result = thread.get()

        Args:
            editgroup_id (str):
            ident (str):
            entity (ReleaseEntity):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EntityEdit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['editgroup_id'] = \
            editgroup_id
        kwargs['ident'] = \
            ident
        kwargs['entity'] = \
            entity
        return self.update_release_endpoint.call_with_http_info(**kwargs)

