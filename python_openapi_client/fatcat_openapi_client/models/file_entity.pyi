from typing import Any, Optional, Dict, List
from fatcat_openapi_client import ReleaseEntity

class FileEntity:
    openapi_types: Any
    attribute_map: Any
    discriminator: Any
    def __init__(self, state: Optional[str] = ..., ident: Optional[str] = ..., revision: Optional[str] = ..., redirect: Optional[str] = ..., extra: Optional[Dict[str, Any]] = ..., edit_extra: Optional[Dict[str, Any]] = ..., size: Optional[int] = ..., md5: Optional[str]  = ..., sha1: Optional[str] = ..., sha256: Optional[str] = ..., urls: Any | None = ..., mimetype: Optional[str]  = ..., content_scope: Optional[str] = ..., release_ids: Optional[List[str]] = ..., releases: Optional[List[ReleaseEntity]]= ...) -> None: ...
    @property
    def state(self) -> Optional[str]: ...
    @state.setter
    def state(self, state: Optional[str]) -> None: ...
    @property
    def ident(self) -> Optional[str]: ...
    @ident.setter
    def ident(self, ident: Optional[str]) -> None: ...
    @property
    def revision(self) -> Optional[str]: ...
    @revision.setter
    def revision(self, revision: Optional[str]) -> None: ...
    @property
    def redirect(self) -> Optional[str]: ...
    @redirect.setter
    def redirect(self, redirect: Optional[str]) -> None: ...
    @property
    def extra(self) -> Optional[Dict[str, Any]]: ...
    @extra.setter
    def extra(self, extra: Optional[Dict[str, Any]]) -> None: ...
    @property
    def edit_extra(self) -> Optional[Dict[str, Any]]: ...
    @edit_extra.setter
    def edit_extra(self, edit_extra: Optional[Dict[str, Any]]) -> None: ...
    @property
    def size(self) -> Optional[int]: ...
    @size.setter
    def size(self, size: Optional[int]) -> None: ...
    @property
    def md5(self) -> Optional[str]: ...
    @md5.setter
    def md5(self, md5: Optional[str]) -> None: ...
    @property
    def sha1(self) -> Optional[str]: ...
    @sha1.setter
    def sha1(self, sha1: Optional[str]) -> None: ...
    @property
    def sha256(self) -> Optional[str]: ...
    @sha256.setter
    def sha256(self, sha256: Optional[str]) -> None: ...
    @property
    def urls(self): ...
    @urls.setter
    def urls(self, urls) -> None: ...
    @property
    def mimetype(self) -> Optional[str]: ...
    @mimetype.setter
    def mimetype(self, mimetype: Optional[str]) -> None: ...
    @property
    def content_scope(self) -> Optional[str]: ...
    @content_scope.setter
    def content_scope(self, content_scope: Optional[str]) -> None: ...
    @property
    def release_ids(self) -> Optional[List[str]]: ...
    @release_ids.setter
    def release_ids(self, release_ids: Optional[List[str]]) -> None: ...
    @property
    def releases(self) -> Optional[List[ReleaseEntity]]: ...
    @releases.setter
    def releases(self, releases: Optional[List[ReleaseEntity]]) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
