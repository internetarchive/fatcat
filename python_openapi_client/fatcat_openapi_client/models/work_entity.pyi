from typing import Any, Optional, Dict, List

class WorkEntity:
    openapi_types: Any
    attribute_map: Any
    discriminator: Any
    def __init__(self, state: Optional[str] = ..., ident: Optional[str] = ..., revision: Optional[str] = ..., redirect: Optional[str] = ..., extra: Optional[Dict[str, Any]] = ..., edit_extra: Optional[Dict[str, Any]] = ...) -> None: ...
    @property
    def state(self) -> Optional[str]: ...
    @state.setter
    def state(self, state: Optional[str]) -> None: ...
    @property
    def ident(self) -> Optional[str]: ...
    @ident.setter
    def ident(self, ident: Optional[str]) -> None: ...
    @property
    def revision(self) -> Optional[str]: ...
    @revision.setter
    def revision(self, revision: Optional[str]) -> None: ...
    @property
    def redirect(self) -> Optional[str]: ...
    @redirect.setter
    def redirect(self, redirect: Optional[str]) -> None: ...
    @property
    def extra(self) -> Optional[Dict[str, Any]]: ...
    @extra.setter
    def extra(self, extra: Optional[Dict[str, Any]]) -> None: ...
    @property
    def edit_extra(self) -> Optional[Dict[str, Any]]: ...
    @edit_extra.setter
    def edit_extra(self, edit_extra: Optional[Dict[str, Any]]) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
