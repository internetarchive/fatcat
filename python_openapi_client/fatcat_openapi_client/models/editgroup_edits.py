# coding: utf-8

"""
    fatcat

    Fatcat is a scalable, versioned, API-oriented catalog of bibliographic entities and file metadata.   # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Contact: webservices@archive.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EditgroupEdits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'containers': 'list[EntityEdit]',
        'creators': 'list[EntityEdit]',
        'files': 'list[EntityEdit]',
        'filesets': 'list[EntityEdit]',
        'webcaptures': 'list[EntityEdit]',
        'releases': 'list[EntityEdit]',
        'works': 'list[EntityEdit]'
    }

    attribute_map = {
        'containers': 'containers',
        'creators': 'creators',
        'files': 'files',
        'filesets': 'filesets',
        'webcaptures': 'webcaptures',
        'releases': 'releases',
        'works': 'works'
    }

    def __init__(self, containers=None, creators=None, files=None, filesets=None, webcaptures=None, releases=None, works=None):  # noqa: E501
        """EditgroupEdits - a model defined in OpenAPI"""  # noqa: E501

        self._containers = None
        self._creators = None
        self._files = None
        self._filesets = None
        self._webcaptures = None
        self._releases = None
        self._works = None
        self.discriminator = None

        if containers is not None:
            self.containers = containers
        if creators is not None:
            self.creators = creators
        if files is not None:
            self.files = files
        if filesets is not None:
            self.filesets = filesets
        if webcaptures is not None:
            self.webcaptures = webcaptures
        if releases is not None:
            self.releases = releases
        if works is not None:
            self.works = works

    @property
    def containers(self):
        """Gets the containers of this EditgroupEdits.  # noqa: E501


        :return: The containers of this EditgroupEdits.  # noqa: E501
        :rtype: list[EntityEdit]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this EditgroupEdits.


        :param containers: The containers of this EditgroupEdits.  # noqa: E501
        :type: list[EntityEdit]
        """

        self._containers = containers

    @property
    def creators(self):
        """Gets the creators of this EditgroupEdits.  # noqa: E501


        :return: The creators of this EditgroupEdits.  # noqa: E501
        :rtype: list[EntityEdit]
        """
        return self._creators

    @creators.setter
    def creators(self, creators):
        """Sets the creators of this EditgroupEdits.


        :param creators: The creators of this EditgroupEdits.  # noqa: E501
        :type: list[EntityEdit]
        """

        self._creators = creators

    @property
    def files(self):
        """Gets the files of this EditgroupEdits.  # noqa: E501


        :return: The files of this EditgroupEdits.  # noqa: E501
        :rtype: list[EntityEdit]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this EditgroupEdits.


        :param files: The files of this EditgroupEdits.  # noqa: E501
        :type: list[EntityEdit]
        """

        self._files = files

    @property
    def filesets(self):
        """Gets the filesets of this EditgroupEdits.  # noqa: E501


        :return: The filesets of this EditgroupEdits.  # noqa: E501
        :rtype: list[EntityEdit]
        """
        return self._filesets

    @filesets.setter
    def filesets(self, filesets):
        """Sets the filesets of this EditgroupEdits.


        :param filesets: The filesets of this EditgroupEdits.  # noqa: E501
        :type: list[EntityEdit]
        """

        self._filesets = filesets

    @property
    def webcaptures(self):
        """Gets the webcaptures of this EditgroupEdits.  # noqa: E501


        :return: The webcaptures of this EditgroupEdits.  # noqa: E501
        :rtype: list[EntityEdit]
        """
        return self._webcaptures

    @webcaptures.setter
    def webcaptures(self, webcaptures):
        """Sets the webcaptures of this EditgroupEdits.


        :param webcaptures: The webcaptures of this EditgroupEdits.  # noqa: E501
        :type: list[EntityEdit]
        """

        self._webcaptures = webcaptures

    @property
    def releases(self):
        """Gets the releases of this EditgroupEdits.  # noqa: E501


        :return: The releases of this EditgroupEdits.  # noqa: E501
        :rtype: list[EntityEdit]
        """
        return self._releases

    @releases.setter
    def releases(self, releases):
        """Sets the releases of this EditgroupEdits.


        :param releases: The releases of this EditgroupEdits.  # noqa: E501
        :type: list[EntityEdit]
        """

        self._releases = releases

    @property
    def works(self):
        """Gets the works of this EditgroupEdits.  # noqa: E501


        :return: The works of this EditgroupEdits.  # noqa: E501
        :rtype: list[EntityEdit]
        """
        return self._works

    @works.setter
    def works(self, works):
        """Sets the works of this EditgroupEdits.


        :param works: The works of this EditgroupEdits.  # noqa: E501
        :type: list[EntityEdit]
        """

        self._works = works

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditgroupEdits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
