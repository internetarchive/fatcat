from typing import Any

class TypeWithDefault(type):
    def __init__(cls, name, bases, dct) -> None: ...
    def __call__(cls, **kwargs): ...
    def set_default(cls, default) -> None: ...

class Configuration:
    host: str | None
    temp_folder_path: Any
    api_key: Any | None
    api_key_prefix: Any
    refresh_api_key_hook: Any
    username: Any
    password: Any
    logger: Any
    logger_stream_handler: Any
    logger_file_handler: Any
    verify_ssl: bool
    ssl_ca_cert: Any
    cert_file: Any
    key_file: Any
    assert_hostname: Any
    connection_pool_maxsize: Any
    proxy: Any
    proxy_headers: Any
    safe_chars_for_path_param: str
    retries: Any
    def __init__(self, host: str = ..., username: str = ..., password: str = ...) -> None: ...
    @property
    def logger_file(self): ...
    @logger_file.setter
    def logger_file(self, value) -> None: ...
    @property
    def debug(self): ...
    @debug.setter
    def debug(self, value) -> None: ...
    @property
    def logger_format(self): ...
    logger_formatter: Any
    @logger_format.setter
    def logger_format(self, value) -> None: ...
    def get_api_key_with_prefix(self, identifier): ...
    def get_basic_auth_token(self): ...
    def auth_settings(self): ...
    def to_debug_report(self): ...
    def get_host_settings(self): ...
    def get_host_from_settings(self, index, variables=...): ...
